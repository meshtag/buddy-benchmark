//===- Kernels.h ----------------------------------------------------------===//
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//===----------------------------------------------------------------------===//
//
// This file defines the kernels for the image processing benchmarks.
//
//===----------------------------------------------------------------------===//

#ifndef IMAGE_PROCESSING_KERNELS
#define IMAGE_PROCESSING_KERNELS

// clang-format off

static float prewittKernelAlign[9] = {-1, 0, 1, -1, 0, 1, -1, 0, 1};
static int prewittKernelRows = 3;
static int prewittKernelCols = 3;

static float sobel3x3KernelAlign[9] = {1, 0, -1, 2, 0, -2, 1, 0, -1};
static int sobel3x3KernelRows = 3;
static int sobel3x3KernelCols = 3;

static float sobel5x5KernelAlign[25] = {2, 1, 0, -1, -2,
                                        3, 2, 0, -2, -3,
                                        4, 3, 0, -3, -4,
                                        3, 2, 0, -2, -3,
                                        2, 1, 0, -1, -2};
static int sobel5x5KernelRows = 5;
static int sobel5x5KernelCols = 5;

static float sobel7x7KernelAlign[49] = {3, 2, 1, 0, -1, -2, -3,
                                        4, 3, 2, 0, -2, -3, -4,
                                        5, 4, 3, 0, -3, -4, -5,
                                        6, 5, 4, 0, -4, -5, -6,
                                        5, 4, 3, 0, -3, -4, -5,
                                        4, 3, 2, 0, -2, -3, -4,
                                        3, 2, 1, 0, -1, -2, -3};
static int sobel7x7KernelRows = 7;
static int sobel7x7KernelCols = 7;

static float sobel9x9KernelAlign[81] = {4, 3, 2, 1, 0, -1, -2, -3, -4,
                                        5, 4, 3, 2, 0, -2, -3, -4, -5,
                                        6, 5, 4, 3, 0, -3, -4, -5, -6,
                                        7, 6, 5, 4, 0, -4, -5, -6, -7,
                                        8, 7, 6, 5, 0, -5, -6, -7, -8,
                                        7, 6, 5, 4, 0, -4, -5, -6, -7,
                                        6, 5, 4, 3, 0, -3, -4, -5, -6,
                                        5, 4, 3, 2, 0, -2, -3, -4, -5,
                                        4, 3, 2, 1, 0, -1, -2, -3, -4};
static int sobel9x9KernelRows = 9;
static int sobel9x9KernelCols = 9;

static float sobel11x11KernelAlign[121] = {
    -1.0000e+00, -8.0000e+00, -2.7000e+01, -4.8000e+01, -4.2000e+01,  0.0000e+00,
    4.2000e+01,  4.8000e+01,  2.7000e+01,  8.0000e+00,  1.0000e+00,
   -1.0000e+01, -8.0000e+01, -2.7000e+02, -4.8000e+02, -4.2000e+02,  0.0000e+00,
    4.2000e+02,  4.8000e+02,  2.7000e+02,  8.0000e+01,  1.0000e+01,
   -4.5000e+01, -3.6000e+02, -1.2150e+03, -2.1600e+03, -1.8900e+03,  0.0000e+00,
    1.8900e+03,  2.1600e+03,  1.2150e+03,  3.6000e+02,  4.5000e+01,
   -1.2000e+02, -9.6000e+02, -3.2400e+03, -5.7600e+03, -5.0400e+03,  0.0000e+00,
    5.0400e+03,  5.7600e+03,  3.2400e+03,  9.6000e+02,  1.2000e+02,
   -2.1000e+02, -1.6800e+03, -5.6700e+03, -1.0080e+04, -8.8200e+03,  0.0000e+00,
    8.8200e+03,  1.0080e+04,  5.6700e+03,  1.6800e+03,  2.1000e+02,
   -2.5200e+02, -2.0160e+03, -6.8040e+03, -1.2096e+04, -1.0584e+04,  0.0000e+00,
    1.0584e+04,  1.2096e+04,  6.8040e+03,  2.0160e+03,  2.5200e+02,
   -2.1000e+02, -1.6800e+03, -5.6700e+03, -1.0080e+04, -8.8200e+03,  0.0000e+00,
    8.8200e+03,  1.0080e+04,  5.6700e+03,  1.6800e+03,  2.1000e+02,
   -1.2000e+02, -9.6000e+02, -3.2400e+03, -5.7600e+03, -5.0400e+03,  0.0000e+00,
    5.0400e+03,  5.7600e+03,  3.2400e+03,  9.6000e+02,  1.2000e+02,
   -4.5000e+01, -3.6000e+02, -1.2150e+03, -2.1600e+03, -1.8900e+03,  0.0000e+00,
    1.8900e+03,  2.1600e+03,  1.2150e+03,  3.6000e+02,  4.5000e+01,
   -1.0000e+01, -8.0000e+01, -2.7000e+02, -4.8000e+02, -4.2000e+02,  0.0000e+00,
    4.2000e+02,  4.8000e+02,  2.7000e+02,  8.0000e+01,  1.0000e+01,
   -1.0000e+00, -8.0000e+00, -2.7000e+01, -4.8000e+01, -4.2000e+01,  0.0000e+00,
    4.2000e+01,  4.8000e+01,  2.7000e+01,  8.0000e+00,  1.0000e+00
    };
static int sobel11x11KernelRows = 11;
static int sobel11x11KernelCols = 11;

static float sobel13x13KernelAlign[169] = {
    -1.00000e+00, -1.00000e+01, -4.40000e+01, -1.10000e+02, -1.65000e+02,
    -1.32000e+02,  0.00000e+00,  1.32000e+02,  1.65000e+02,  1.10000e+02,
     4.40000e+01,  1.00000e+01,  1.00000e+00,
    -1.20000e+01, -1.20000e+02, -5.28000e+02, -1.32000e+03, -1.98000e+03,
    -1.58400e+03,  0.00000e+00,  1.58400e+03,  1.98000e+03,  1.32000e+03,
     5.28000e+02,  1.20000e+02,  1.20000e+01,
    -6.60000e+01, -6.60000e+02, -2.90400e+03, -7.26000e+03, -1.08900e+04,
    -8.71200e+03,  0.00000e+00,  8.71200e+03,  1.08900e+04,  7.26000e+03,
     2.90400e+03,  6.60000e+02,  6.60000e+01,
    -2.20000e+02, -2.20000e+03, -9.68000e+03, -2.42000e+04, -3.63000e+04,
    -2.90400e+04,  0.00000e+00,  2.90400e+04,  3.63000e+04,  2.42000e+04,
     9.68000e+03,  2.20000e+03,  2.20000e+02,
    -4.95000e+02, -4.95000e+03, -2.17800e+04, -5.44500e+04, -8.16750e+04,
    -6.53400e+04,  0.00000e+00,  6.53400e+04,  8.16750e+04,  5.44500e+04,
     2.17800e+04,  4.95000e+03,  4.95000e+02,
    -7.92000e+02, -7.92000e+03, -3.48480e+04, -8.71200e+04, -1.30680e+05,
    -1.04544e+05,  0.00000e+00,  1.04544e+05,  1.30680e+05,  8.71200e+04,
     3.48480e+04,  7.92000e+03,  7.92000e+02,
    -9.24000e+02, -9.24000e+03, -4.06560e+04, -1.01640e+05, -1.52460e+05,
    -1.21968e+05,  0.00000e+00,  1.21968e+05,  1.52460e+05,  1.01640e+05,
     4.06560e+04,  9.24000e+03,  9.24000e+02,
    -7.92000e+02, -7.92000e+03, -3.48480e+04, -8.71200e+04, -1.30680e+05,
    -1.04544e+05,  0.00000e+00,  1.04544e+05,  1.30680e+05,  8.71200e+04,
     3.48480e+04,  7.92000e+03,  7.92000e+02,
    -4.95000e+02, -4.95000e+03, -2.17800e+04 ,-5.44500e+04, -8.16750e+04,
    -6.53400e+04,  0.00000e+00,  6.53400e+04,  8.16750e+04,  5.44500e+04,
     2.17800e+04,  4.95000e+03,  4.95000e+02,
    -2.20000e+02, -2.20000e+03, -9.68000e+03, -2.42000e+04, -3.63000e+04,
    -2.90400e+04,  0.00000e+00,  2.90400e+04,  3.63000e+04,  2.42000e+04,
     9.68000e+03,  2.20000e+03,  2.20000e+02,
    -6.60000e+01, -6.60000e+02, -2.90400e+03, -7.26000e+03, -1.08900e+04,
    -8.71200e+03,  0.00000e+00,  8.71200e+03,  1.08900e+04,  7.26000e+03,
     2.90400e+03,  6.60000e+02,  6.60000e+01,
    -1.20000e+01, -1.20000e+02, -5.28000e+02, -1.32000e+03, -1.98000e+03,
    -1.58400e+03,  0.00000e+00,  1.58400e+03,  1.98000e+03,  1.32000e+03,
     5.28000e+02,  1.20000e+02,  1.20000e+01,
    -1.00000e+00, -1.00000e+01, -4.40000e+01, -1.10000e+02, -1.65000e+02,
    -1.32000e+02,  0.00000e+00,  1.32000e+02,  1.65000e+02 , 1.10000e+02,
     4.40000e+01,  1.00000e+01,  1.00000e+00
};
static int sobel13x13KernelRows = 13;
static int sobel13x13KernelCols = 13;

static float laplacianKernelAlign[9] = {1, 1, 1, 1, -8, 1, 1, 1, 1};
static int laplacianKernelRows = 3;
static int laplacianKernelCols = 3;

static float logKernelAlign[25] = {0, 0, 1, 0, 0, 
                                   0, 1, 2, 1, 0,
                                   1, 2, -16, 2, 1,
                                   0, 1, 2, 1, 0,
                                   0, 0, 1, 0, 0};
static int logKernelRows = 5;
static int logKernelCols = 5;

// clang-format on

#endif // IMAGE_PROCESSING_KERNELS
